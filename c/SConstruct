# This is a comment

env = Environment()   # Create an environmnet

libcommon_target = "common"
libcommon_sources = [ Glob("src/common/*.c") ]

libcommon = env.StaticLibrary(target = libcommon_target, source = libcommon_sources)


singletontest = env.Program(source = [ Glob("src/Behavioral/Chain_Of_Responsibility/*.c") ], 
	target = "src/Behavioral/Chain_Of_Responsibility/test")

singletontest = env.Program(source = [ Glob("src/Behavioral/Command/*.c"), "libcommon.a"], 
	target = "src/Behavioral/Command/test")

singletontest = env.Program(source = [ Glob("src/Behavioral/Interpreter/*.c"), "libcommon.a" ], 
	target = "src/Behavioral/Interpreter/test")

singletontest = env.Program(source = [ Glob("src/Behavioral/Iterator/*.c"), "libcommon.a"], 
	target = "src/Behavioral/Iterator/test")

singletontest = env.Program(source = [ Glob("src/Behavioral/Mediator/*.c") ], 
	target = "src/Behavioral/Mediator/test")

singletontest = env.Program(source = [ Glob("src/Behavioral/Memento/*.c"), "libcommon.a" ], 
	target = "src/Behavioral/Memento/test")

singletontest = env.Program(source = [ Glob("src/Behavioral/Observer/*.c") ], 
	target = "src/Behavioral/Observer/test")

singletontest = env.Program(source = [ Glob("src/Behavioral/State/*.c"), "libcommon.a" ], 
	target = "src/Behavioral/State/test")

singletontest = env.Program(source = [ Glob("src/Behavioral/Strategy/*.c"), "libcommon.a" ], 
	target = "src/Behavioral/Strategy/test")

singletontest = env.Program(source = [ Glob("src/Behavioral/Template_Method/*.c"), "libcommon.a" ], 
	target = "src/Behavioral/Template_Method/test")


singletontest = env.Program(source = [ Glob("src/Behavioral/Visitor/*.c") ], 
	target = "src/Behavioral/Visitor/test")




singletontest = env.Program(source = [ Glob("src/Creational/Abstract_Factory/*.c"), "libcommon.a" ], 
	target = "src/Creational/Abstract_Factory/test")

singletontest = env.Program(source = [ Glob("src/Creational/Builder/*.c"), "libcommon.a" ], 
	target = "src/Creational/Builder/test")


singletontest = env.Program(source = [ Glob("src/Creational/Factory_Method/*.c"), "libcommon.a" ], 
	target = "src/Creational/Factory_Method/test")

singletontest = env.Program(source = [ Glob("src/Creational/Prototype/*.c") ], 
	target = "src/Creational/Prototype/test")

singletontest = env.Program(source = [ Glob("src/Creational/Singleton/*.c") ], 
	target = "src/Creational/Singleton/test")




singletontest = env.Program(source = [ Glob("src/Structural/Adapter/*.c") ], 
	target = "src/Structural/Adapter/test")

singletontest = env.Program(source = [ Glob("src/Structural/Bridge/*.c") ], 
	target = "src/Structural/Bridge/test")


singletontest = env.Program(source = [ Glob("src/Structural/Composite/*.c") ], 
	target = "src/Structural/Composite/test")


singletontest = env.Program(source = [ Glob("src/Structural/Decorator/*.c") , "libcommon.a" ], 
	target = "src/Structural/Decorator/test")

singletontest = env.Program(source = [ env.Glob("src/Structural/Facade/*.c"), "libcommon.a" ], 
	target = "src/Structural/Facade/test")


singletontest = env.Program(source = [ Glob("src/Structural/Flyweight/*.c") ], 
	target = "src/Structural/Flyweight/test")

singletontest = env.Program(source = [ Glob("src/Structural/Proxy/*.c") ], 
	target = "src/Structural/Proxy/test")
